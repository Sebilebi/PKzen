@using PKzen.Models

<div class="pokemon-detail-card">
    <!-- Close button -->
    <div class="close-button" @onclick="HandleClose">×</div>

    <!-- Gender selector buttons -->
    <div class="gender-selector">
        <div class="gender-button male">♂</div>
        <div class="gender-button female">♀</div>
    </div>

    <div class="pokemon-detail-card-header">
        <div class="pokemon-number">#@Pokemon.Id</div>
        <img src="@(Pokemon.Species.Sprites.FirstOrDefault(s => s.Name == "black_white_animated")?.FrontMale)" alt="@Pokemon.Name" class="pokemon-img">
        <h1 class="pokemon-name">@Pokemon.Name</h1>
        <p class="pokemon-title">@Pokemon.Species.Genera</p>
        <div class="type-icons">
            @foreach (var type in Pokemon.Species.Types)
            {
                var typeColor = PKzen.Models.Type.GetTypeColor(type.Type.Id);
                <div class="type-icon-container">
                    <img src="@type.Type.Name" alt="@type.Type.Name" class="type-icon"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                    <div class="type-card" style="display: none; background-color: @typeColor;">@type.Type.Name</div>
                </div>
            }
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">HABILIDADES</h2>
        <div class="abilities">
            @foreach (var ability in Pokemon.Abilities)
            {
                <div class="ability">@ability.Name</div>
            }
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">DEBILIDADES</h2>
        <div class="weaknesses">
            <!-- Aquí deberías agregar la lógica para mostrar las debilidades -->
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">ESTADÍSTICAS</h2>
        <div class="stats-container">
            @foreach (var stat in Pokemon.Stats)
            {
                var (percentage, color) = GetStatPercentageAndColor(stat.BaseStat);
                <div class="stat-row">
                    <div class="stat-name">@stat.Stat.Name</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" style="width: @percentage%; background-color: @color;"></div>
                    </div>
                    <div class="stat-value">@stat.BaseStat</div>
                </div>
            }
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">EVOLUCIÓN</h2>
        @if (Pokemon.Species.EvolutionChains.FirstOrDefault() is var chain && chain != null)
        {
            var evolvable = chain.Members
                                 .Where(m => m.MinLevel.HasValue && m.MinLevel.Value > 0)
                                 .OrderBy(m => m.MinLevel.Value)
                                 .ToList();
            var finals = chain.Members
                              .Where(m => !m.MinLevel.HasValue || m.MinLevel.Value == 0)
                              .ToList();
            var stages = evolvable.Concat(finals).ToList();

            <div class="evolution-chain">
                @for (int i = 0; i < stages.Count; i++)
                {
                    var m = stages[i];
                    var isActive = string.Equals(m.Name, Pokemon.Name, StringComparison.OrdinalIgnoreCase);

                    <!-- Etapa evolutiva -->
                    <div class="evolution-stage">
                        <img src="@GetPokemonsSpriteByName(m.Name, "black_white")" alt="@m.Name" class="evolution-img @(isActive ? "active" : "")" />
                        <div class="evolution-name">@m.Name</div>
                    </div>

                    @if (i < stages.Count - 1)
                    {
                        <div class="evolution-arrow-block">
                            <div class="evolution-arrow">→</div>
                            @* Método de evolución *@
                            @if (m.MinLevel.HasValue && m.MinLevel.Value > 0)
                            {
                                <div class="evolution-level">Lv. @m.MinLevel</div>
                            }
                            else if (!string.IsNullOrEmpty(m.Item))
                            {
                                <div class="evolution-level">@m.Item</div>
                            }
                            else if (!string.IsNullOrEmpty(m.EvolutionTrigger))
                            {
                                <div class="evolution-level">@m.EvolutionTrigger</div>
                            }
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <p>Este Pokémon no tiene cadena evolutiva registrada.</p>
        }
    </div>

    <div class="navigation">
        <div class="nav-button">
            ‹ <span class="nav-number">#@(Pokemon.Id - 1)</span>
        </div>
        <div class="nav-button">
            <span class="nav-number">#@(Pokemon.Id + 1)</span> ›
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Pokemon Pokemon { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }
}